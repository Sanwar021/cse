#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#define INFINITY 9999
#define MAX 9
int v;
char ch1[30], ch2[30];
void dijkstra(int G[MAX][MAX], int n, int u);
int city_code(char a[30]);
void city(int a);
void print_console();
int main()
{
    title();
    int choice;
    while (1)
    {
        system("cls");
        displayHomePage();
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            print_console();
            path_plan();
            break;
        case 2:
            printf("Exiting program.\n");
            exit(0);
        default:
            printf("\n\t\t\tInvalid choice.... Please select a valid option.\n\n");
        }
    }
    return 0;
}
// Option Menu
void displayHomePage()
{
    system("color F0");
    printf("     Flight Path Planner\n\n");
    printf("    1. Plan a Flight Path\n");
    printf("    2. Exit\n");
    printf("    Choose an option: ");
}
// Choosing path
int path_plan()
{
    int G[MAX][MAX] = {{0, 40, 0, 0, 0, 0, 0, 80, 0},
                       {40, 0, 80, 0, 0, 0, 0, 110, 0},
                       {0, 80, 0, 70, 0, 40, 0, 0, 20},
                       {0, 0, 70, 0, 90, 140, 0, 0, 0},
                       {0, 0, 0, 90, 0, 100, 0, 0, 0},
                       {0, 0, 40, 140, 100, 0, 20, 0, 0},
                       {0, 0, 0, 0, 0, 20, 0, 10, 60},
                       {80, 110, 0, 0, 0, 0, 10, 0, 70},
                       {0, 0, 20, 0, 0, 0, 60, 70, 0}};
    int i, j, u;
    printf("\nEnter Your Location :");
    scanf("%s", ch1);
    printf("\nEnter Your Destination :");
    scanf("%s", ch2);
    u = city_code(ch1);
    v = city_code(ch2);
    animation();
    dijkstra(G, MAX, u);
    getch();
    return 0;
}
void dijkstra(int G[MAX][MAX], int n, int u)
{
    int cost[MAX][MAX], D[MAX], prev[MAX];
    int visit[MAX], count, min, next, i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (G[i][j] == 0)
                cost[i][j] = INFINITY;
            else
                cost[i][j] = G[i][j];
        }
    }
    for (i = 0; i < n; i++)
    {
        D[i] = cost[u][i];
        prev[i] = u;
        visit[i] = 0;
    }
    D[u] = 0;
    visit[u] = 1;
    count = 0;
    while (count < n - 2)
    {
        min = INFINITY;
        for (i = 0; i < n; i++)
        {
            if (D[i] < min && !visit[i])
            {
                min = D[i];
                next = i;
            }
        }
        visit[next] = 1;
        for (i = 0; i < n; i++)
        {
            if (!visit[i])
                if (min + cost[next][i] < D[i])
                {
                    D[i] = min + cost[next][i];
                    prev[i] = next;
                }
        }
        count++;
    }
    system("cls");
    print_console();
    printf("\n\nPath = %s", ch2);
    j = v;
    do
    {
        j = prev[j];
        city(j);
    } while (j != u);
    printf("\nShortest Distance From %s to %s =  %d Km", ch1, ch2, D[v]);
    printf("\nTotal Fuel Amount = %d Litre", D[v] * 12);
    printf("\n");
}
// source
int city_code(char a[30])
{
    int b;
    if (strcmp(a, "TKR") == 0)
    {
        b = 0;
    }
    else if (strcmp(a, "SPD") == 0)
    {
        b = 1;
    }
    else if (strcmp(a, "VGLM") == 0)
    {
        b = 2;
    }
    else if (strcmp(a, "ZYL") == 0)
    {
        b = 3;
    }
    else if (strcmp(a, "CXB") == 0)
    {
        b = 4;
    }
    else if (strcmp(a, "BZL") == 0)
    {
        b = 5;
    }
    else if (strcmp(a, "JSR") == 0)
    {
        b = 6;
    }
    else if (strcmp(a, "RJH") == 0)
    {
        b = 7;
    }
    else if (strcmp(a, "DAC") == 0)
    {
        b = 8;
    }
    return b;
}
// Destination
void city(int a)
{
    switch (a)
    {
    case 0:
        printf(" <- %s ", "TKR");
        break;
    case 1:
        printf(" <- %s ", "SPD");
        break;
    case 2:
        printf(" <- %s ", "VGLM");
        break;
    case 3:
        printf(" <- %s ", "ZYL");
        break;
    case 4:
        printf(" <- %s ", "CXB");
        break;
    case 5:
        printf(" <- %s ", "BZL");
        break;
    case 6:
        printf(" <- %s ", "JSR");
        break;
    case 7:
        printf(" <- %s ", "RJH");
        break;
    case 8:
        printf(" <- %s ", "DAC");
        break;
    }
}
// MAP
void print_console()
{
    printf("\n\n                              DOMESTIC FLIGHT PATH MAP -01 \n\n");
    printf("                                  80                  70\n");
    printf("                        SPD -----------  VGLM  ------------  ZYL  \n");
    printf("                      /   |             |     \\              |  \\  \n");
    printf("                     /    |             |      \\             |   \\  \n");
    printf("                 40 /     |          20 |       \\            |    \\ 90\n");
    printf("                   /      |             |        \\           |     \\  \n");
    printf("                  /       |             |         \\          |      \\  \n");
    printf("                 TKR      | 110      DAC           \\         |       CXB \n");
    printf("                 \\        |        /    |           \\ 40     | 140   / \n");
    printf("                  \\       |       /     |            \\       |      /  \n");
    printf("                   \\      |   70 /      |             \\      |     / \n");
    printf("                 80 \\     |     /       | 60           \\     |    / 100\n");
    printf("                     \\    |    /        |               \\    |   / \n");
    printf("                      \\   |   /         |                \\   |  / \n");
    printf("                       \\  |  /          |                 \\  | / \n");
    printf("                         RJH --------- JSR --------------- BZL \n");
    printf("                                   10                20        \n\n\n");
    printf("\t\t<TKR>  THAKURGAON\t\t  <ZYL>  SYLHET            \n");
    printf("\t\t<SPD>  SAIDPUR\t\t          <CXB>  COX'S BAZAR  \n");
    printf("\t\t<RJH>  RAJSHAHI\t\t          <BZL>  BARISAL     \n");
    printf("\t\t<DAC>  DHAKA\t\t          <JSR>  JESSORE        \n");
    printf("\t\t<VGLM> LALMONIRHAT\t\t        \n");
}
// title
void title()
{
    system("cls");
    system("color 7");
    printf("\n\n\n\t\t\t#######################################################################");
    printf("\n\n\n\n\t\t\t\t         Project about Flight Path Planner\n");
    printf("\n\t\t\t\t\t     Instructor:Amit Mondol");
    printf("\n\n\t\t\t\t\t\t      Created by \n");
    printf("\t\t\t\t\t\t     ------------ \n");
    printf("\n\t\t\t\t\t         Name:Sanwarul Islam");
    printf("\n\t\t\t\t\t         ID  :2021-2-60-021");
    printf("\n\n\t\t\t\t\t         Name:Ratry");
    printf("\n\t\t\t\t\t         ID  :2020-3-60-002");
    printf("\n\n\n\t\t\t#######################################################################");
    puts("\n\n\t\t\t\t\t <><><><>  LETS GET STARTED  <><><><>");
    puts("\n\n\t\t\t\t\t        Press any key to continue");
    getch();
}
// rocket speed
void delay(unsigned int value)
{
    unsigned int count1 = 0;
    unsigned int count2 = 0;

    for (count1 = 0; count1 < value; count1++)
    {
        for (count2 = 0; count2 < count1; count2++)
        {
        }
    }
}

// string to display plane
const char plane[] =
    "                     ^   \n\
                   /   \\             \n\
                   |---|               \n\
                   |   |                \n\
          _________| P |_________        \n\
         /         | L |         \\       \n\
        /__________| A |__________\\       \n\
                   | N |                    \n\
                   | E |                     \n\
                   |   |                    \n\
                  /|   |\\                    \n\
                 |_|___|_|                     \n\ ";

int animation()
{

    int bottom_up = 0;
    const int someDelay = 7000;
    int up = 0;

    // jump to bottom of console


    for (bottom_up = 0; bottom_up < 30; ++bottom_up)
    {
        printf("\n");
    }

    // Print plane
    fputs(plane, stdout);

    for (up = 0; up < 30; ++up)
    {
        // Rocket move on the basis of delay
        delay(someDelay);

        // move rocket a line upward
        printf("\n");
    }
    return 0;
}

